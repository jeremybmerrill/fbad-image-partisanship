{"version":3,"sources":["image_partisanship.onnx","components/utils.js","components/classes.js","components/Scorecard.js","components/Predictions.js","components/Snackbars.js","components/DropzoneIcon.js","components/DropImageCard.js","components/Classifier.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","imageSize","getBreed","className","split","map","p","charAt","toUpperCase","slice","join","makeSession","InferenceSession","backendHint","warmupModel","session","a","async","size","dims","reduce","b","warmupTensor","Tensor","Float32Array","i","data","Math","random","run","loadModel","resnet","runModel","input","setOutputMap","setTimeout","width","height","preprocess","inputTensor","outputMap","_runModel","dataTensor","ndarray","dataProcessedTensor","ops","assign","pick","divseq","subseq","wait","ms","Promise","res","rej","global","imgConfig","maxWidth","maxHeight","cover","crop","canvas","crossOrigin","orientation","getImage","url","loadImage","img","fetchImage","setData","current","type","Error","ctx","getContext","drawImage","getImageData","useStyles","makeStyles","card","item","paddingTop","Scorecard","items","classes","Card","List","dense","avatar","name","percentage","id","ListItem","key","ListItemText","primary","ListItemSecondaryAction","Typography","Predictions","output","acts","k","topK","Array","from","act","sort","reverse","denominator","y","exp","_","breed","prob","getTopK","toFixed","theme","box","padding","margin","content","boxSizing","info","backgroundColor","palette","main","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","InfoSnackbar","Box","SnackbarContent","clsx","LoadingSnackbar","CircularProgress","color","fileLoaded","isDragActive","position","justifyContent","marginBottom","zIndex","DropImageCard","setFile","canvasRef","onDrop","useCallback","acceptedFiles","length","console","log","file","startsWith","useDropzone","getRootProps","getInputProps","ref","alt","DropzoneIcon","root","flexGrow","Classifier","useState","loaded","setLoaded","isLoading","setIsLoading","useRef","useEffect","outputData","values","next","value","Grid","container","Button","variant","onClick","marginTop","menuButton","title","heading","typography","pxToRem","fontWeight","fontWeightRegular","table","footer","button","App","AppBar","Toolbar","Container","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","Link","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f827c030.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image_partisanship.79fad1aa.onnx\";","import loadImage from 'blueimp-load-image';\nimport {Tensor, InferenceSession} from 'onnxjs';\nimport ndarray from 'ndarray';\nimport ops from 'ndarray-ops';\nimport resnet from '../image_partisanship.onnx'; // '../image_partisanship.onnx'; //  '../dogs-resnet18.onnx'\n\nexport const imageSize = 256;\n\nexport const getBreed = className => className.split('_').map(p => {\n    return p.charAt(0).toUpperCase() + p.slice(1)\n}).join(' ')\n\nexport const getBreedImg = className => {\n    const breed = className.split('_').map(p => {\n        return p.charAt(0).toLowerCase() + p.slice(1).toLowerCase()\n    }).join('_')\n    return `${process.env.PUBLIC_URL}/images/${breed}.jpg`\n}\n\nexport const makeSession = (() => {\n    let _session = null;\n    return () => {\n        if (_session !== null) { return _session; }\n        return new InferenceSession({backendHint: 'webgl'});\n    }\n})()\n\nasync function warmupModel (session) {\n    const dims = [1, 3, imageSize, imageSize];\n    const size = dims.reduce((a, b) => a * b);\n    const warmupTensor = new Tensor(new Float32Array(size), 'float32', dims);\n    for (let i = 0; i < size; i++) {\n        warmupTensor.data[i] = Math.random() * 2.0 - 1.0; // random value [-1.0, 1.0)\n    }\n    await session.run([warmupTensor]);\n}\n\nexport async function loadModel (session) {\n    await session.loadModel(resnet);\n    await warmupModel(session);\n}\n\nasync function _runModel (session, input, setOutputMap) {\n    const {width, height} = input;\n    const data = preprocess(input);\n    const inputTensor = new Tensor(data, 'float32', [1, 3, width, height]);\n    // await wait(0);\n    const outputMap = await session.run([inputTensor]);\n    setOutputMap(outputMap);\n}\n\nexport function runModel(session, input, setOutputMap) {\n    setTimeout(() => _runModel(session, input, setOutputMap), 10);\n}\n\n// borrowed from onnx.js example: https://github.com/microsoft/onnxjs/blob/4085b7e61804d093e36af6a456d8c14c329f0a0a/examples/browser/resnet50/index.js#L29\nconst preprocess = input => {\n    const {data, width, height} = input\n\n    // data processing\n    const dataTensor = ndarray(new Float32Array(data), [width, height, 4]);\n    const dataProcessedTensor = ndarray(new Float32Array(width * height * 3), [1, 3, width, height]);\n    ops.assign(dataProcessedTensor.pick(0, 0, null, null), dataTensor.pick(null, null, 0));\n    ops.assign(dataProcessedTensor.pick(0, 1, null, null), dataTensor.pick(null, null, 1));\n    ops.assign(dataProcessedTensor.pick(0, 2, null, null), dataTensor.pick(null, null, 2));\n    ops.divseq(dataProcessedTensor, 255);\n    ops.subseq(dataProcessedTensor.pick(0, 0, null, null), 0.485);\n    ops.subseq(dataProcessedTensor.pick(0, 1, null, null), 0.456);\n    ops.subseq(dataProcessedTensor.pick(0, 2, null, null), 0.406);\n    ops.divseq(dataProcessedTensor.pick(0, 0, null, null), 0.229);\n    ops.divseq(dataProcessedTensor.pick(0, 1, null, null), 0.224);\n    ops.divseq(dataProcessedTensor.pick(0, 2, null, null), 0.225);\n\n    return dataProcessedTensor.data;\n}\n\nconst wait = ms => new Promise((res, rej) => {\n    global.setTimeout(() => res(), ms)\n});\n\nconst imgConfig = {\n    maxWidth: imageSize,\n    maxHeight: imageSize,\n    cover: true,\n    crop: true,\n    canvas: true,\n    crossOrigin: 'Anonymous',\n    orientation: true,\n};\n  \nconst getImage = url => new Promise((res, rej) => {\n    loadImage(url, img => res(img), imgConfig)\n});\n\nexport const fetchImage = async (url, canvas, setData) => {\n    if (!canvas || !canvas.current) return;\n    const img = await getImage(url);\n    if (img.type === \"error\") throw new Error(\"could not load image\");\n    const ctx = canvas.current.getContext('2d');\n    ctx.drawImage(img, 0, 0);\n    await wait(1);\n    const data = ctx.getImageData(0, 0, canvas.current.width, canvas.current.height);\n    setData(data);\n};","export default [\n    'Dem',\n    'GOP',\n    'nonpartisan'\n];","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {imageSize} from './utils'\n\nconst useStyles = makeStyles({\n    card: {\n        width: imageSize,\n        height: imageSize,\n    },\n    item: {\n        paddingTop: 10,\n    },\n});\n\nexport default function Scorecard({items}) {\n    const classes = useStyles();\n    return <Card className={classes.card}><List dense>\n        {items.map(({avatar, name, percentage}) => {\n            const id = `${name}-${percentage}`\n            return <ListItem key={id} className={classes.item}>\n                <ListItemText id={id} primary={name} />\n                <ListItemSecondaryAction>\n                    <Typography>{percentage}%</Typography>\n                </ListItemSecondaryAction>\n            </ListItem>\n        })}\n    </List></Card>;\n};","import React from 'react';\nimport classes from './classes'\nimport Scorecard from './Scorecard';\nimport {getBreedImg, getBreed} from './utils';\n\nconst getTopK = (acts, k) => {\n    const topK = Array.from(acts)\n        .map((act, i) => [act, i])\n        .sort((a, b) => {\n            if (a[0] < b[0]) return -1;\n            if (a[0] > b[0]) return 1;\n            return 0;\n        })\n        .reverse()\n        .slice(0, k)\n\n    // denominator of softmax function\n    const denominator = acts.map(y => Math.exp(y)).reduce((a,b) => a+b)\n    return topK.map(([act, i], _, acts) => ({\n        breed: classes[i],\n        act,\n        prob: Math.exp(act) / denominator,\n    }));\n}\n\nexport default function Predictions({output}) {\n    if (!output) return null;\n    const items = getTopK(output, 5).map(({breed, prob}) => ({\n        name: getBreed(breed),\n        percentage: (prob * 100).toFixed(2),\n        // avatar: getBreedImg(breed),\n    }));\n    return <Scorecard items={items} />;\n}","import React from 'react';\nimport clsx from 'clsx';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {imageSize} from './utils'\n\nconst useStyles = makeStyles(theme => ({\n    box: {\n        width: imageSize,\n        padding: 0,\n        margin: 0,\n    },\n    content: {\n        boxSizing: 'border-box',\n    },\n    info: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\nexport function InfoSnackbar({message}) {\n    const classes = useStyles();\n    return <Box className={classes.box}>\n        <SnackbarContent className={clsx(classes.info, classes.content)} message={\n            <span className={classes.message}>\n                <InfoIcon className={clsx(classes.icon, classes.iconVariant)} />\n                {message}\n            </span>\n        } />\n    </Box>;\n}\n\nexport function LoadingSnackbar({message}) {\n    const classes = useStyles();\n    return <Box className={classes.box}>\n        <SnackbarContent className={classes.content} message={\n            <span className={classes.message}>\n                <CircularProgress size={20} className={classes.iconVariant} />\n                {message}\n            </span>\n        } />\n    </Box>;\n}","import React from 'react';\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    icon: {\n        width: '50%',\n        height: '50%',\n        color: 'grey',\n    },\n});\n\nexport default ({fileLoaded, isDragActive}) => {\n    const classes = useStyles();\n    if (fileLoaded) { return null; }\n    if (isDragActive) { return <CheckCircleIcon className={classes.icon} />; }\n    return <InsertPhotoIcon className={classes.icon} />;\n}","import React, {useCallback} from 'react';\nimport DropzoneIcon from './DropzoneIcon'\nimport {useDropzone} from 'react-dropzone';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport {imageSize} from './utils'\n\nconst useStyles = makeStyles({\n    card: {\n        width: imageSize,\n        height: imageSize,\n        position: 'relative',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginBottom: 10,\n    },\n    canvas: {\n        width: imageSize,\n        height: imageSize,\n        zIndex: 0,\n        position: 'absolute',\n    },\n    input: {\n        zIndex: 9999,\n        position: 'absolute',\n    },\n});\n\nexport default function DropImageCard({setFile, canvasRef, fileLoaded}) {\n    const classes = useStyles();\n    const onDrop = useCallback(acceptedFiles => {\n        if (acceptedFiles.length > 1) {\n            return console.log('can only handle one file at a time');\n        }\n        if (acceptedFiles.length === 0) return;\n        const file = acceptedFiles[0]\n        if (!file.type.startsWith('image')) {\n            return console.log('file must be an image')\n        }\n        setFile(file)\n    }, [setFile])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return <Card {...getRootProps()} className={classes.card}>\n        <canvas className={classes.canvas} ref={canvasRef} width={imageSize} height={imageSize} />\n        <input alt=\"Image Dropzone\" type=\"image\" className={classes.input} {...getInputProps()} />\n        <DropzoneIcon fileLoaded={fileLoaded} isDragActive={isDragActive} />\n    </Card>\n}","import React, {useRef, useEffect, useState} from 'react';\nimport Predictions from './Predictions';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {InfoSnackbar, LoadingSnackbar } from './Snackbars'\nimport DropImageCard from './DropImageCard'\nimport { fetchImage, makeSession, loadModel, runModel } from './utils'\nimport Button from '@material-ui/core/Button';\n\nconst session = makeSession();\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      flexGrow: 1,\n    },\n  }));\n  \n\nexport default function Classifier() {\n    const [loaded, setLoaded] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const startLoadModel = async () => {\n        if (isLoading || loaded) { return; }\n        setIsLoading(true);\n        await loadModel(session);\n        setLoaded(true);\n        setIsLoading(false);\n    }\n    \n    const [file, setFile] = useState(null)    \n    const canvas = useRef(null)\n    const [data, setData] = useState(null)\n    useEffect(() => {\n        if (file) fetchImage(file, canvas, setData);\n    }, [file])\n\n    const [outputMap, setOutputMap] = useState(null);\n\n    useEffect(() => {\n        if (!loaded || !data) return;\n        runModel(session, data, setOutputMap);\n    }, [loaded, data]); // runs when loaded or data changes    \n    const outputData = outputMap && outputMap.values().next().value.data;\n    \n    const classes = useStyles();\n    return <div className={classes.root}>\n        <Grid container spacing={3}>\n            <Grid item>\n                <DropImageCard setFile={setFile} canvasRef={canvas} fileLoaded={!!file} />\n                { !loaded && !isLoading && <Button variant=\"contained\" onClick={startLoadModel}>Load model (86 MB)</Button>}\n                { !loaded && isLoading && <LoadingSnackbar message=\"Loading model...\" /> }\n                { loaded && data && !outputMap && <LoadingSnackbar message=\"Running model...\" /> }\n                { loaded && !file && <InfoSnackbar message=\"Add or take a picture...\" /> }\n                { !!file && !data && <LoadingSnackbar message=\"Loading image...\" /> }\n            </Grid>\n            <Grid item>\n                <Predictions output={outputData} />\n            </Grid>\n        </Grid>\n    </div>\n}","import React from 'react';\nimport Classifier from './Classifier'\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n// import Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport breeds from './classes'\nimport {getBreed} from './utils'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    content: {\n        marginTop: 20,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n    },\n    table: {\n        width: '100%',\n    },\n    footer: {\n        padding: theme.spacing(2),\n        marginTop: 'auto',\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    return <div className={classes.root}>\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Political Ad Image Partisanship Classifier\n                </Typography>\n            </Toolbar>\n        </AppBar>\n\n        <Container className={classes.content}>\n            <Typography variant=\"body2\" className={classes.title}>\n                Click Load Model, wait a few seconds for it to load, then drag and drop an image file on the image icon. The model will guess its partisanship!\n            </Typography>\n            <Classifier />\n        </Container>\n        <Container className={classes.content}>\n            <ExpansionPanel>\n                <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel3a-content\"\n                id=\"panel3a-header\"\n                >\n                <Typography className={classes.heading}>What is this good for?</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                <Typography variant=\"body2\">\n                    Not much. If you submit an image that isn't from a Facebook ad, the prediction will be meaningless. And even for Facebook ad images, this is kind of silly, since partisanship doesn't predict all that much of ad image content.\n                </Typography>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n            <ExpansionPanel>\n                <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel3a-content\"\n                id=\"panel3a-header\"\n                >\n                <Typography className={classes.heading}>What happens to my data?</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                <Typography variant=\"body2\">\n                    No image that you take with or add to this application will be uploaded or stored on my or anyone's servers by this application / website. In fact, your images never leave your device, because all the calculations are done in you browser! \n                </Typography>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n            <ExpansionPanel>\n                <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel3a-content\"\n                id=\"panel3a-header\"\n                >\n                <Typography className={classes.heading}>credits</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <Container>\n                        <Typography variant=\"body2\">\n                            I borrowed this app and much of the code from [David Pfahler](https://github.com/davidpfahler). The Image partisanship bit is all me though. If you want to learn more about the app code, check out the <Link to=\"https://github.com/davidpfahler/react-ml-app\">GitHub repository</Link>.\n                        </Typography>\n                    </Container>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n            <footer className={classes.footer}>\n            </footer>\n        </Container>\n  </div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}